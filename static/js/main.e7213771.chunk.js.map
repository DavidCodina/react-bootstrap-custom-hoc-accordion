{"version":3,"sources":["components/accordion/AwareAccordion.js","components/accordion/AwareToggle.js","components/accordion/Accordion1.js","components/accordion/createAwareAccordion.js","components/accordion/AccordionDemo.js","App.js","index.js"],"names":["AwareAccordion","Accordion","useState","currentKey","setCurrentKey","previousKey","setPreviousKey","accordionIsOpen","setAccordionIsOpen","clickCount","setClickCount","stateAsProps","callback","eventKey","currentCount","useEffect","accordionButttonStyle","display","position","width","alignItems","marginBottom","padding","fontSize","color","fontWeight","textAlign","border","borderRadius","overflowAnchor","transition","AwareToggle","variant","activeVariant","style","children","decoratedOnClick","useAccordionToggle","className","type","onClick","Accordion1","props","variants","defaultActiveKey","Collapse","createAwareAccordion","AwareAccordion1","AccordionDemo","class","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e7213771.chunk.js","sourcesContent":["import React, { useState, useEffect }  from 'react';\n\n\nfunction AwareAccordion({ Accordion }){\n  const [ currentKey,      setCurrentKey      ] = useState('0');\n  const [ previousKey,     setPreviousKey     ] = useState(null);\n  const [ accordionIsOpen, setAccordionIsOpen ] = useState(true);\n  // This is a hack to get the useEffect to run even when \n  // previousKey and currentKey do not change.\n  const [ clickCount,    setClickCount ] = useState(0);\n  \n  const callback = (eventKey) => {\n    setPreviousKey(currentKey);\n    setCurrentKey(eventKey);\n    setClickCount(currentCount => currentCount + 1);\n  };\n\n\n  const stateAsProps = { accordionIsOpen, currentKey, callback };\n\n\n  useEffect(() => {\n    if (previousKey === currentKey && accordionIsOpen){\n      setAccordionIsOpen(false);\n      // console.log(\"Closing.\");\n    } else {\n      setAccordionIsOpen(true);\n      // console.log(\"Opening.\");\n    } \n    // Do not add in other dependencies.\n  }, [previousKey, currentKey, clickCount]); // eslint-disable-line react-hooks/exhaustive-deps\n\n\n  return <Accordion {...stateAsProps} />;\n}\n\n\nexport default AwareAccordion;","import React from 'react'; \nimport { useAccordionToggle } from 'react-bootstrap/AccordionToggle';\n\n\nconst accordionButttonStyle = {\n  display: 'flex',\n  position: 'relative',\n  width: '100%',\n  alignItems: 'center',\n  marginBottom: 0,\n  padding: '1rem 1.25rem',\n  fontSize: '1rem',\n  color: '#FFF',\n  fontWeight: 'bold',\n  textAlign: 'left',\n  border: 0, \n  borderRadius: 0,\n  overflowAnchor: 'none',\n  transition: 'color 0.15s ease-in-out, background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out, border-radius 0.15s ease'\n};\n\n//! The current Bootstrap Sass customizations do not include primary or secondary as theme colors.\n//! That said, it still seemed best to use them as defaults (i.e., for other projects).\n\nfunction AwareToggle({ accordionIsOpen, currentKey, eventKey, callback, variant = 'secondary', activeVariant = 'primary', style = {}, children }){\n  const decoratedOnClick = useAccordionToggle(eventKey, () => callback && callback(eventKey));\n\n  \n  const setClasses = () => {\n    if (accordionIsOpen && currentKey === eventKey){\n      return `btn btn-${activeVariant} active`;\n    } else if (accordionIsOpen && currentKey !== eventKey){\n      return `btn btn-${variant}`;\n    } else if (!accordionIsOpen){\n      return `btn btn-${variant}`;\n    } \n    return `btn btn-${variant}`;\n  };\n\n\n  return (\n    <button \n      className={setClasses()}\n      style={{ ...accordionButttonStyle, ...style }} \n      type=\"button\" \n      onClick={decoratedOnClick}\n    >\n      { children }\n    </button>\n  );\n}\n\n\nexport default AwareToggle;","import React       from 'react'; \nimport Accordion   from 'react-bootstrap/Accordion';\nimport AwareToggle from './AwareToggle';\n\n\nfunction Accordion1(props){\n  const variant       = 'gray';\n  const activeVariant = 'green';\n  const variants      = { variant, activeVariant }\n\n\n  return (\n    <Accordion className=\"w-90 mx-auto mb-5\" defaultActiveKey=\"0\">\n      <div className=\"accordion-item border-dark overflow-hidden\">\n        <AwareToggle eventKey=\"0\" style={{}} {...variants} {...props}>Item 1</AwareToggle>\n        <Accordion.Collapse className=\"accordion-collapse\" eventKey=\"0\">\n          <div className=\"accordion-body\">\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n          </div> \n        </Accordion.Collapse>\n      </div>\n\n\n      <div className=\"accordion-item border-dark overflow-hidden\">\n        <AwareToggle eventKey=\"1\" style={{}} {...variants} {...props}>Item 2</AwareToggle>\n        <Accordion.Collapse className=\"accordion-collapse\" eventKey=\"1\">\n          <div className=\"accordion-body\">\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n          </div> \n        </Accordion.Collapse>\n      </div>\n\n\n      <div className=\"accordion-item border-dark overflow-hidden\">\n        <AwareToggle eventKey=\"2\" style={{}} {...variants} {...props}>Item 3</AwareToggle>\n        <Accordion.Collapse className=\"accordion-collapse\" eventKey=\"2\">\n          <div className=\"accordion-body\">\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n          </div> \n        </Accordion.Collapse>\n      </div>\n    </Accordion>\n  );\n}\n\n\nexport default Accordion1;","import React, { useState, useEffect } from 'react';\n\n\nfunction createAwareAccordion(Accordion){\n  return function(){\n    const [ currentKey,      setCurrentKey      ] = useState('0');\n    const [ previousKey,     setPreviousKey     ] = useState(null);\n    const [ accordionIsOpen, setAccordionIsOpen ] = useState(true);\n    const [ clickCount,      setClickCount      ] = useState(0);\n    \n    const callback = (eventKey) => {\n      setPreviousKey(currentKey);\n      setCurrentKey(eventKey);\n      setClickCount(currentCount => currentCount + 1);\n    };\n  \n  \n    const stateAsProps = { accordionIsOpen, currentKey, callback };\n  \n  \n    useEffect(() => {\n      if (previousKey === currentKey && accordionIsOpen){\n        setAccordionIsOpen(false);\n      } else {\n        setAccordionIsOpen(true);\n      } \n      // Do not add in other dependencies.\n    }, [previousKey, currentKey, clickCount]); // eslint-disable-line react-hooks/exhaustive-deps\n  \n  \n    return <Accordion {...stateAsProps} />;\n  };\n}\n\n\nexport default createAwareAccordion;","import React                from 'react'; \nimport AwareAccordion       from './AwareAccordion';\nimport Accordion1           from './Accordion1';\nimport createAwareAccordion from './createAwareAccordion';\n\n\nconst AwareAccordion1 = createAwareAccordion(Accordion1);\n\n\nfunction AccordionDemo(){\n  return (\n    <main className=\"pb-5\">\n      <div className=\"container-fluid pt-3 px-md-5\">\n        <h2 className=\"mb-5 text-white-3d text-center\">Accordion Demo</h2>\n\n        \n\n        <article className=\"article\">\n          <h2 className=\"text-white-3d\">Overview:</h2>\n\n\n          <p>In Bootstrap v5, the accordion no longer uses cards internally.\n          This means making some tweaks to react-bootstrap v1.6.0.\n          Note also that instead of using the Bootstrap v5 <code>.accordion-button</code> class,\n          the button is being styled with CSS in JS (in AwareToggle.js), in addition to the following\n          custom selectors in App.scss</p>\n\n\n          <pre><code>{`\n  .accordion-item button:focus,\n  .accordion-item button:active {\n    box-shadow:none !important;\n  }\n  \n  .accordion-item button.active::after {\n    background-image: url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='%23000000'%3e%3cpath fill-rule='evenodd' d='M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z'/%3e%3c/svg%3e\");\n    transform: rotate(-180deg);\n  }\n  \n  .accordion-item button::after {\n    flex-shrink: 0;\n    width: 1.25rem;\n    height: 1.25rem;\n    margin-left: auto;\n    content: \"\";\n    background-image: url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='%23000000'%3e%3cpath fill-rule='evenodd' d='M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z'/%3e%3c/svg%3e\");\n    background-repeat: no-repeat;\n    background-size: 1.25rem;\n    transition: transform 0.2s ease-in-out;\n  }\n          `}</code></pre>\n          \n          \n          <p>Unfortunately, the react-bootstrap accordion \n          is not 'self aware' out of the box. It doesn't necessarily need to be.\n          That said, if you want to use the caret then it does,\n          and that entails <strong><em>a lot</em></strong> of tweaks!</p>\n\n          \n          <h3 className=\"mb-3 text-gray\">As component that accepts a component as a prop:</h3>\n\n\n          <AwareAccordion Accordion={Accordion1} />\n\n\n          <div class=\"horizontal-ruler\">\n            <hr/><hr/><hr/><hr/><hr/><hr/><hr/><hr/><hr/><hr/><hr/><hr/><hr/>\n            <hr/><hr/><hr/><hr/><hr/><hr/><hr/><hr/><hr/><hr/><hr/><hr/><hr/>\n            <hr/><hr/><hr/><hr/><hr/><hr/><hr/><hr/><hr/><hr/><hr/><hr/><hr/>\n          </div>\n\n\n          <h3 className=\"mb-3 text-gray\">As HOC:</h3>\n\n\n          <AwareAccordion1 />\n\n\n          <p>Ultimately, it's probably just easier to build your own accordion using Bootstrap styles.\n          However, it was an interesting challenge to enhance the react-bootstrap implementation.</p>\n        </article>\n      </div>        \n    </main>\n  );\n}\n\n\nexport default AccordionDemo;","import React             from 'react';\nimport './scss/bootstrap/custom-bootstrap.scss';\nimport './scss/App.scss';\n\nimport AccordionDemo from './components/accordion/AccordionDemo';\n\n\nfunction App(){  \n  return (\n    <main className=\"pb-5\">\n      <div className=\"container-fluid pt-3 px-md-5\">\n        <AccordionDemo />\n      </div>        \n    </main>\n  );\n}\n\n\nexport default App;\n\n","import ReactDOM from 'react-dom';\nimport App      from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}